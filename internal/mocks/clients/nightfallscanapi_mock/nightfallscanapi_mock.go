// Code generated by MockGen. DO NOT EDIT.
// Source: ../nightfallintf/nightfall_scan_api.go

// Package nightfallscanapi_mock is a generated GoMock package.
package nightfallscanapi_mock

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	openapi "github.com/nightfallai/nightfall_go_client/generated"
)

// NightfallScanAPI is a mock of NightfallScanAPI interface
type NightfallScanAPI struct {
	ctrl     *gomock.Controller
	recorder *NightfallScanAPIMockRecorder
}

// NightfallScanAPIMockRecorder is the mock recorder for NightfallScanAPI
type NightfallScanAPIMockRecorder struct {
	mock *NightfallScanAPI
}

// NewNightfallScanAPI creates a new mock instance
func NewNightfallScanAPI(ctrl *gomock.Controller) *NightfallScanAPI {
	mock := &NightfallScanAPI{ctrl: ctrl}
	mock.recorder = &NightfallScanAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *NightfallScanAPI) EXPECT() *NightfallScanAPIMockRecorder {
	return m.recorder
}

// ScanPayload mocks base method
func (m *NightfallScanAPI) ScanPayload(ctx context.Context, scanReq openapi.ScanRequest) ([][]openapi.ScanResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPayload", ctx, scanReq)
	ret0, _ := ret[0].([][]openapi.ScanResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanPayload indicates an expected call of ScanPayload
func (mr *NightfallScanAPIMockRecorder) ScanPayload(ctx, scanReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPayload", reflect.TypeOf((*NightfallScanAPI)(nil).ScanPayload), ctx, scanReq)
}
