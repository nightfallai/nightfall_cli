// Code generated by MockGen. DO NOT EDIT.
// Source: ../githubintf/github_repositories.go

// Package githubrepositories_mock is a generated GoMock package.
package githubrepositories_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v31/github"
	reflect "reflect"
)

// GithubRepositories is a mock of GithubRepositories interface
type GithubRepositories struct {
	ctrl     *gomock.Controller
	recorder *GithubRepositoriesMockRecorder
}

// GithubRepositoriesMockRecorder is the mock recorder for GithubRepositories
type GithubRepositoriesMockRecorder struct {
	mock *GithubRepositories
}

// NewGithubRepositories creates a new mock instance
func NewGithubRepositories(ctrl *gomock.Controller) *GithubRepositories {
	mock := &GithubRepositories{ctrl: ctrl}
	mock.recorder = &GithubRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *GithubRepositories) EXPECT() *GithubRepositoriesMockRecorder {
	return m.recorder
}

// CreateComment mocks base method
func (m *GithubRepositories) CreateComment(ctx context.Context, owner, repo, sha string, comment *github.RepositoryComment) (*github.RepositoryComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, sha, comment)
	ret0, _ := ret[0].(*github.RepositoryComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment
func (mr *GithubRepositoriesMockRecorder) CreateComment(ctx, owner, repo, sha, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*GithubRepositories)(nil).CreateComment), ctx, owner, repo, sha, comment)
}
