// Code generated by MockGen. DO NOT EDIT.
// Source: ../libgitintf/libgit.go

// Package libgit_mock is a generated GoMock package.
package libgit_mock

import (
	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v30"
	reflect "reflect"
)

// Libgit is a mock of Libgit interface
type Libgit struct {
	ctrl     *gomock.Controller
	recorder *LibgitMockRecorder
}

// LibgitMockRecorder is the mock recorder for Libgit
type LibgitMockRecorder struct {
	mock *Libgit
}

// NewLibgit creates a new mock instance
func NewLibgit(ctrl *gomock.Controller) *Libgit {
	mock := &Libgit{ctrl: ctrl}
	mock.recorder = &LibgitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Libgit) EXPECT() *LibgitMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *Libgit) Clone(repoURL, filePath string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", repoURL, filePath)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *LibgitMockRecorder) Clone(repoURL, filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*Libgit)(nil).Clone), repoURL, filePath)
}

// DiffRevToRev mocks base method
func (m *Libgit) DiffRevToRev(repo *git.Repository, baseRev, headRev string) (*git.Diff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffRevToRev", repo, baseRev, headRev)
	ret0, _ := ret[0].(*git.Diff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffRevToRev indicates an expected call of DiffRevToRev
func (mr *LibgitMockRecorder) DiffRevToRev(repo, baseRev, headRev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffRevToRev", reflect.TypeOf((*Libgit)(nil).DiffRevToRev), repo, baseRev, headRev)
}

// ConvertDiffToPatch mocks base method
func (m *Libgit) ConvertDiffToPatch(diff *git.Diff) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertDiffToPatch", diff)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertDiffToPatch indicates an expected call of ConvertDiffToPatch
func (mr *LibgitMockRecorder) ConvertDiffToPatch(diff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertDiffToPatch", reflect.TypeOf((*Libgit)(nil).ConvertDiffToPatch), diff)
}
