// Code generated by MockGen. DO NOT EDIT.
// Source: ../libgitintf/libgit_cloner.go

// Package libgitcloner_mock is a generated GoMock package.
package libgitcloner_mock

import (
	gomock "github.com/golang/mock/gomock"
	git "github.com/libgit2/git2go/v30"
	reflect "reflect"
)

// LibgitCloner is a mock of LibgitCloner interface
type LibgitCloner struct {
	ctrl     *gomock.Controller
	recorder *LibgitClonerMockRecorder
}

// LibgitClonerMockRecorder is the mock recorder for LibgitCloner
type LibgitClonerMockRecorder struct {
	mock *LibgitCloner
}

// NewLibgitCloner creates a new mock instance
func NewLibgitCloner(ctrl *gomock.Controller) *LibgitCloner {
	mock := &LibgitCloner{ctrl: ctrl}
	mock.recorder = &LibgitClonerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *LibgitCloner) EXPECT() *LibgitClonerMockRecorder {
	return m.recorder
}

// Clone mocks base method
func (m *LibgitCloner) Clone(filePath string) (*git.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", filePath)
	ret0, _ := ret[0].(*git.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone
func (mr *LibgitClonerMockRecorder) Clone(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*LibgitCloner)(nil).Clone), filePath)
}
